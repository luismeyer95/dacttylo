WPM Feature Behaviour:
    -> display the user's typing speed during a session in words-per-minute
    -> updated in real-time every second
    -> use color presets depending on the typing speed
    -> maybe also use a graph and display speed over time

Requirements:
    -> how to compute the wpm speed?
        * a "word" can be considered to be 5 characters on average, so we can work with CPM and convert to WPM (= CPM / 5)
        * the inputs over which the speed is computed should be "correct" inputs relative to the session, only inputs that advanced the cursor are valid
        * user speed at moment T could be derived from the average speed over the last 4 seconds
        * count the correct inputs from the last 4 seconds, then either:
            divide by 4 (CPS)
            multiply by 15 (CPM)
            multiply by 3 (WPM)
    -> record correct inputs when the session starts
    -> every second, render a widget using the computed wpm
        * how to trigger a render? should the computation happen before each render?
            - create new app event variant WPM, create a task with a ticker that sends a WPM event every second

Typing Session Report Feature Behaviour:
    -> at the end of a session, present the user with a session report
    -> includes
        * average/top wpm
        * number of mistakes
        * precision % (correct inputs / total inputs)
        * 5 worst characters

Requirements:
    -> record all session input results (correct and wrong), wrong inputs should come with metadata (got vs expected)
    -> all the stats can be derived from the input result collection + session start timestamp
        * average wpm:
            session_duration_seconds = last_correct_input_timestamp - session_start_timestamp
            characters_per_second = total_correct_inputs / session_duration_seconds
            words_per_minute = (characters_per_second * 60) / 5
        * top wpm:
            - 'top' refers to a singular highest wpm value among other computed wpm values
            - should determine at which frequency to perform the computation over time (every second)
              + how each computation samples the input data (last 4 seconds)
            - for every second in the total duration of the session, compute the wpm for the last 4 seconds
            - could be helpful to get from iter({ timestamp, input_result }) to iter({ second, iter(input_result) })
        * precision:
            total_correct_inputs / total_inputs
        * number of mistakes:
            total_wrong_inputs
        * 5 worst characters:
            mistake_charlist = inputs.filter(wrong).map(expected_char)
            mistake_charset = set_from(mistake_charlist)
            charstats = mistake_charset.map(|char| {
                (char_stat, rest) = mistake_charlist.partition(|c| c == char)
                mistake_charlist = rest
                return (char, char_stat.count())
            })
            5_worst = charstats.sort_by_descending_count().take(5)
    

Ghost Feature Behaviour:
    -> allow the user to race against his past self in a practice session
    -> opt-in with a CLI flag in practice mode
    -> the ghost is represented by a grey cursor to minimize visual distraction


Mistake Highlighting Feature:
    -> color mistakes in yellow
Requirements:
    -> keep track of wrong input result positions/coords in the practice text
    -> apply permanent yellow bg highlighting at these positions

QOL Features:
    -> word wrapping
    -> skip trailing wp
Requirements:
    -> change line processor to apply word wrapping